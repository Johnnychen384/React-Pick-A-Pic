{"version":3,"sources":["Context.js","Nav.js","Image.js","Home.js","CartImage.js","Cart.js","App.js","reportWebVitals.js","index.js"],"names":["photoContext","React","createContext","Context","props","_React$useState","useState","_React$useState2","Object","slicedToArray","allPhotos","setAllPhotos","_React$useState3","_React$useState4","firstLoad","setFirstLoad","_React$useState5","_React$useState6","cart","setCart","useEffect","_getData","asyncToGenerator","_regeneratorRuntime","mark","_callee","res","data","wrap","_context","prev","next","fetch","sent","json","JSON","parse","localStorage","getItem","stop","apply","this","arguments","getData","setItem","stringify","react_default","a","createElement","Provider","value","toggleFav","id","prevState","map","item","objectSpread","isFavorite","addToCart","isInCart","find","pic","filter","concat","toConsumableArray","EmptyCart","children","Nav","cartHasItem","useContext","length","aria-hidden","className","react_router_dom","style","textDecoration","to","Image","_React$useContext","isHovered","setIsHovered","onMouseEnter","onMouseLeave","fav","onClick","src","img","alt","picture","HomePage","homePhotos","key","url","CartImage","hovered","setHovered","Cart","checkout","setCheckout","itemsInCart","setTimeout","alert","toLocaleString","currency","App","Fragment","react_router","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.b8d5bfa2.chunk.js","sourcesContent":["import React from \"react\"\n\n// Allows us to pass data around without using props\nconst photoContext = React.createContext()\n\nexport default function Context(props){\n\n    const [allPhotos, setAllPhotos] = React.useState([])\n\n    // checks to make sure this render isnt the first render\n    // to prevent getData() from rerunning \n    const [firstLoad, setFirstLoad] = React.useState(true)\n\n    const [cart, setCart] = React.useState([])\n    \n    React.useEffect(() => {\n\n        // function to grab data from api and set it to allPhotos state depending on condition\n        async function getData() {\n            const res = await fetch(\"https://raw.githubusercontent.com/bobziroll/scrimba-react-bootcamp-images/master/images.json\")\n            const data = await res.json()\n            setAllPhotos(() => {\n                if(JSON.parse(localStorage.getItem(\"allPhotos\"))){\n                    return JSON.parse(localStorage.getItem(\"allPhotos\"))\n                } else {\n                    return data\n                }\n                \n            })\n\n            // on the first render setCart state to an array depending on if localstorage is empty\n            setCart(() => {\n                if(JSON.parse(localStorage.getItem(\"cart\"))){\n                    return JSON.parse(localStorage.getItem(\"cart\"))\n                } else {\n                    return []\n                }\n            })\n\n            // state to prevent fetching a whole new set of data which prevents the localstorage from saving properly\n            setFirstLoad(false)\n        }\n\n   \n\n        // checks to see if its the first render\n        if(firstLoad){\n            getData()\n\n            // if  not first render, grab data from localstorage\n        } else {\n            localStorage.setItem(\"cart\", JSON.stringify(cart))\n            localStorage.setItem(\"allPhotos\", JSON.stringify(allPhotos))\n        }\n        \n        \n        \n\n        // states to watch to rerender\n    }, [cart, allPhotos])\n\n\n    // function which is used to toggle the heart which lets user know\n    // if picture is their favorite\n    const toggleFav = (id) => {\n        setAllPhotos(prevState => {\n            return prevState.map(item => {\n                if(item.id === id){\n                    return {\n                        ...item,\n                        isFavorite: !item.isFavorite\n                    }\n                } else {\n                    return item\n                }\n            })\n        })\n    }\n\n\n\n    // function which adds items and removes items from/to cart\n    const addToCart = (item) => {\n\n        // checks to see if the item passed in that triggers this function\n        // is already in the cart state\n        const isInCart = cart.find(pic => pic.id === item.id)\n        \n        // if it is in cart\n        if(isInCart){\n\n            setCart(prevState => {\n                return prevState.filter(pic => pic.id !== item.id)\n            })\n            \n        } else {\n\n            // if it isnt in cart\n            setCart(prevState => {\n                return [\n                    ...prevState,\n                    item\n                ]\n            })\n        }\n    }\n\n    // Emptys cart state. Will be used for \"Check out button\"\n    const EmptyCart = () => {\n        setCart([])\n    }\n\n\n\n    return (\n        <photoContext.Provider value={{allPhotos, cart, toggleFav, addToCart, EmptyCart}}>\n            {props.children}\n        </photoContext.Provider>\n    )\n}\n\nexport {Context, photoContext}","import React from \"react\"\nimport {Link} from \"react-router-dom\"\nimport \"./App.css\"\nimport { photoContext } from \"./Context\"\n\nexport default function Nav(props){\n\n    // grabs data from Context.js's provider value\n    const {cart} = React.useContext(photoContext)\n\n    // checks if cart is empty or not. Depending on if it is or not, this will pass different cart icons\n    const cartHasItem = cart.length > 0 ? <i aria-hidden={false} className=\"fa fa-shopping-cart FilledCart\"></i> : <i aria-hidden={false} className=\"fa fa-shopping-cart unfilledCart\"></i>\n\n    // Links below are equal to \"a\" tags\n    // even in css we can still refer the \"Link\" by using \"a\"\n    // Links changes the actual url we are on\n    return(\n        <nav className=\"navbar\">\n            <h1><Link style={{textDecoration: 'None'}} to=\"/React-Pick-A-Pic\" >Pick A Pic</Link></h1>\n            <div className=\"flex\">\n                <Link to=\"/React-Pick-A-Pic/cart\">{cartHasItem}</Link>\n            </div>\n        </nav>\n    )\n    \n}\n\n\n","import React from \"react\"\nimport {photoContext} from './Context'\n\nexport default function Image(props){\n\n    // grabs methods and data\n    // toggleFav function here literally will change the Heart icon from filled to unfilled\n    // while \"favoriteToggle\" checks to see if it is filled or not and does not change the actual \n    // isFavorite property\n    const {toggleFav, addToCart, cart} = React.useContext(photoContext)\n\n\n    // condition to check if user cursor is on image or not.\n    const [isHovered, setIsHovered] = React.useState(false)\n\n\n    // this function checks to see if the isFavorite property is true or false\n    // if true it will render a heart icon that is filled, while if it is false\n    // AND users cursor is on it(isHovered State is true) then it will render an \n    // unfilled heart\n    const favoriteToggle = () => {\n        if(props.fav){\n            return <i className=\"fas fa-heart filled\" onClick={() => toggleFav(props.id)}></i>\n        } else if(isHovered){\n            return <i className=\"fa fa-heart unfilled\" onClick={() => toggleFav(props.id)}></i>\n        }\n    }\n\n\n    // function which checks to see if item that triggers this is in the cart already.\n    // if it is then render a blue colored plus, if item is not in cart AND\n    // users cursor is on the item, renders a white plus.\n    const addedToggle = (item) => {\n\n        // checks the cart State for item\n        const isItAdded = cart.find(picture => picture.id === item)\n\n        // checks the array above this called \"isItAdded\"\n        if(isItAdded){\n            return <i className=\"fa fa-plus-circle plusFilled\" onClick={() => addToCart(props.pic)}></i>\n        } else if (isHovered) {\n            return <i className=\"fa fa-plus-circle plusUnfilled\" onClick={() => addToCart(props.pic)}></i>\n        }\n    }\n\n\n    \n    return(\n        <div className=\"image\" \n            onMouseEnter={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n        >\n            \n            {favoriteToggle()}\n            <img src={props.img} alt=\"#\"/>\n            {addedToggle(props.id)}\n        </div>\n    )\n}","import React from \"react\"\nimport { photoContext } from \"./Context\"\nimport Image from \"./Image\"\nexport default function HomePage(props){\n\n    // grabs data/methods from Context.js\n    const {allPhotos} = React.useContext(photoContext)\n    \n    // pass data from allPhotos state into a new array with elements\n    const homePhotos = allPhotos.map(pic => {\n        return <Image key={pic.id} img={pic.url} id={pic.id} fav={pic.isFavorite} pic={pic}/>\n    })\n\n    // react automatically renders/reads js code which is in curlys down below.\n    return(\n        <div className=\"gridEl\">\n            {homePhotos}\n        </div>\n    )\n}","import React from \"react\"\n\n\n\nexport default function CartImage(props){\n\n    // checks if user cursor is on item\n    const [hovered, setHovered] = React.useState(false)\n\n    return (\n        <div className=\"flexCol\">\n                    \n            <div \n                onMouseEnter={() => setHovered(true)}\n                onMouseLeave={() => setHovered(false)}\n            >\n\n                {/* renders a trash icon which is either white or blue depending on if user is hovering over it\n                    if it is hovered over and clicked the addToCart function will trigger. addToCart not only \"adds item to cart\"\n                    but it also removes items from carts if it is already inside and this function runs.\n                */}\n\n                {hovered ? <i className=\"fa fa-trash trashfocused\" onClick={() => props.addToCart(props.item)}></i> : <i className=\"fa fa-trash trashunfocused\" ></i>}\n                <div className=\"flexCart\">\n                    <img src={props.item.url} alt=\"#\"/>\n                    <p>$ 5.99</p>\n                </div>\n                \n            </div>\n        \n        </div>\n    )\n}","import React from \"react\"\nimport { photoContext } from \"./Context\"\nimport CartImage from \"./CartImage\"\n\nexport default function Cart(props){\n\n    // methods and data passed from Context.js\n    const {cart, addToCart, EmptyCart} = React.useContext(photoContext)\n\n    // state that renders the text of the check out button\n    const [checkout, setCheckout] = React.useState('Check Out')\n\n\n    // function that is triggered when check out button is clicked\n    // this is meant to imitate an actual buying process\n    const changeCheckOut = () => {\n\n        // moment button is clicked changes state of checkout\n        // to the string Processing...\n        setCheckout(\"Processing...\")\n\n        // After 2 seconds runs 3 functions\n        // Emptys the cart through EmptyCart()\n        // alerts user with a message\n        // resets checkout state to \"Check Out\"\n        setTimeout(() => {\n            EmptyCart()\n            alert(\"Your Order is Processed!\")\n            setCheckout(\"Check Out\")\n        }, 2000)\n    }\n\n\n    // when called it generates a number\n    const total = () => {\n\n        // checks to see if cart has item. If so it will multiple the number of items\n        // with a hardset number 5.99 in this case and when returned the variable is converted to USD\n        const results = cart.length > 0 ? cart.length * 5.99 : 0\n        return results.toLocaleString(\"en-US\", {style: \"currency\", currency: \"USD\"})\n    }\n\n\n    // goes through the cart state and renders elements using each items data.\n    // created a CartImage component so that each image has its own hover state.\n    const itemsInCart = cart.map(item => {\n        return  <CartImage key={item.id} addToCart={addToCart} item={item}/>\n    })\n\n    return(\n        <div>\n            {itemsInCart}\n\n\n            {/* checks if cart is empty when user switchs to this Cart page */}\n            {cart.length > 0 ? \n            <div className=\"flexTotal\">\n                <button onClick={changeCheckOut}>{checkout}</button>\n                <h3>Total: {total()}</h3>\n            </div> :\n            <h1>Empty Cart! Please return to homepage! (Click the text \"Pick A Pic\")</h1>\n            }\n            \n            \n        </div>\n    )\n}","import React from \"react\"\nimport {Routes, Route} from \"react-router-dom\"\nimport './App.css';\nimport Nav from \"./Nav\"\nimport Home from \"./Home\"\nimport Cart from \"./Cart\"\n\n\n// bceause this is an older version of react-router, there is no switch. Instead we use\n// Routes which has the same function.\nfunction App() {\n  return (\n    <>\n      <Nav />\n      <hr />\n      <Routes>\n        <Route exact path=\"/React-Pick-A-Pic\" element={<Home />} />\n        <Route path=\"/React-Pick-A-Pic/cart\" element={<Cart />} />\n      </Routes>\n    </>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Context} from './Context'\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <Router>\n    <Context>\n      <App />\n    </Context>\n  </Router>\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}